---
description: 
globs: 
alwaysApply: true
---
# Rules for cursory

Cursory is a personal web application designed to organize and structure technical knowledge into well-defined courses and learning roadmaps. It focuses on topics such as robotics, MATLAB, embedded systems, programming, software, and artificial intelligence — allowing for the structured documentation of mastered subjects.

The core purpose of Cursory is to serve as a personal knowledge repository for quick reference, while also laying the foundation for future mentorship or guided learning opportunities.

## Tech Stack

The backend for Cursory is built using the following technologies:

- Runtime: Node.js 22
- Framework: Express
- Language: TypeScript
- Database: PostgreSQL
- ORM: Prisma
- Authentication: JWT with Passport
- Data Validation: Express Open API Validator
- Api Documentation: Swagger OpenAPI
- Hosting: Railway

## General Rules

- **Never make unsolicited changes.**
- **Never push all changes at once.**
- For each step, **clearly explain what is being changed and why**, then **describe what the next step will be**, and **wait for my confirmation before proceeding**.


## Project Structure

- The src/ folder should reflect business concepts, not technical layers.

```bash
/src
  /commons          # Shared utilities, error handling, middleware
  /courses          # Course domain module
  /modules          # Module domain module (future)
  /lessons          # Lesson domain module (future)
  /roadmaps         # Roadmap domain module (future)
  /router.ts        # Centralized route registration
  /index.ts         # App configuration and middleware setup
```

- Each domain module should include its own layered structure:

```bash
/courses
  /domain           # Entities, business logic, repository interfaces
  /application      # Use cases, orchestration logic
  /infrastructure   # Database access, controllers, external services
  /interfaces       # DTOs, API contracts (if needed)
```

## Layer Responsibilities

| Layer             | Responsibilities                                                                    |
| ----------------- | ----------------------------------------------------------------------------------- |
| `domain/`         | Entities, core business logic, pure interfaces. No dependencies outside this layer. |
| `application/`    | Use cases, orchestration logic, commands, queries, services.                        |
| `infrastructure/` | Database access (e.g. Prisma), controllers, JWT, external services.                 |

## Global Code Style Rules

- TypeScript must be used throughout the entire codebase.
- Use a functional programming approach unless otherwise specified.
- Use camelCase for variables, functions, and methods.
- Use PascalCase for classes, enums, interfaces, and types.
- Use UPPER_SNAKE_CASE for global constants (e.g. MAX_LENGTH)
- Use 2-space indentation and double quotes (").
- Never use barrel files.
- Group imports in the following order:
    - Node.js built-ins
    - External packages
    - Absolute imports from src/
    - Relative imports (./, ../)

## Programming Style Preferences

- **Use Cases**: Prefer functional programming style with pure functions.
- **Controllers**: Keep minimal, only orchestrate use cases and handle HTTP concerns.

## File & Folder Naming

- File and folder names must use kebab-case (e.g. course-controller.ts).
- Each file should ideally export one main class or function.

##  Architectural Rules

- No business logic in controllers. Controllers should only call use cases.
- No inward dependencies. domain/ and application/ must not import anything from infrastructure/ or interface/.
- Prisma models must not be used directly in the domain layer.
- All input validation is handled using express-openapi-validator.
- Business rules must live in pure, testable code in the domain/ layer.
- Use centralized route registration in `router.ts` for all application routes.
- Implement repository pattern with generic base repository for common CRUD operations.

## Error Handling

- Use centralized error management with `ErrorFactory` and `AppError` classes.
- All errors should be created through `ErrorFactory` for consistency.
- Business logic should throw `AppError` instances, not generic errors.

## Comments and Documentation

- Use JSDoc-style comments (/** */) for exported functions, classes, and interfaces.
- Write comments in English.
- Avoid redundant comments — code should be self-explanatory whenever possible.

## OpenAPI Usage

- API documentation must live in a dedicated folder: /openapi or /docs.
- OpenAPI should be kept in YAML or JSON format (preferably YAML).

- Use tools like swagger-ui-express to serve it in development.